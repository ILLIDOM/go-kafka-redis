// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InterfaceServiceClient is the client API for InterfaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterfaceServiceClient interface {
	GetReceivedBytes(ctx context.Context, in *InterfaceRequest, opts ...grpc.CallOption) (*InterfaceReply, error)
	GetSentBytes(ctx context.Context, in *InterfaceRequest, opts ...grpc.CallOption) (*InterfaceReply, error)
}

type interfaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterfaceServiceClient(cc grpc.ClientConnInterface) InterfaceServiceClient {
	return &interfaceServiceClient{cc}
}

func (c *interfaceServiceClient) GetReceivedBytes(ctx context.Context, in *InterfaceRequest, opts ...grpc.CallOption) (*InterfaceReply, error) {
	out := new(InterfaceReply)
	err := c.cc.Invoke(ctx, "/proto.InterfaceService/GetReceivedBytes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceServiceClient) GetSentBytes(ctx context.Context, in *InterfaceRequest, opts ...grpc.CallOption) (*InterfaceReply, error) {
	out := new(InterfaceReply)
	err := c.cc.Invoke(ctx, "/proto.InterfaceService/GetSentBytes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterfaceServiceServer is the server API for InterfaceService service.
// All implementations must embed UnimplementedInterfaceServiceServer
// for forward compatibility
type InterfaceServiceServer interface {
	GetReceivedBytes(context.Context, *InterfaceRequest) (*InterfaceReply, error)
	GetSentBytes(context.Context, *InterfaceRequest) (*InterfaceReply, error)
	mustEmbedUnimplementedInterfaceServiceServer()
}

// UnimplementedInterfaceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInterfaceServiceServer struct {
}

func (UnimplementedInterfaceServiceServer) GetReceivedBytes(context.Context, *InterfaceRequest) (*InterfaceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceivedBytes not implemented")
}
func (UnimplementedInterfaceServiceServer) GetSentBytes(context.Context, *InterfaceRequest) (*InterfaceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSentBytes not implemented")
}
func (UnimplementedInterfaceServiceServer) mustEmbedUnimplementedInterfaceServiceServer() {}

// UnsafeInterfaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterfaceServiceServer will
// result in compilation errors.
type UnsafeInterfaceServiceServer interface {
	mustEmbedUnimplementedInterfaceServiceServer()
}

func RegisterInterfaceServiceServer(s grpc.ServiceRegistrar, srv InterfaceServiceServer) {
	s.RegisterService(&InterfaceService_ServiceDesc, srv)
}

func _InterfaceService_GetReceivedBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServiceServer).GetReceivedBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.InterfaceService/GetReceivedBytes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServiceServer).GetReceivedBytes(ctx, req.(*InterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterfaceService_GetSentBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServiceServer).GetSentBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.InterfaceService/GetSentBytes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServiceServer).GetSentBytes(ctx, req.(*InterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InterfaceService_ServiceDesc is the grpc.ServiceDesc for InterfaceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InterfaceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.InterfaceService",
	HandlerType: (*InterfaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReceivedBytes",
			Handler:    _InterfaceService_GetReceivedBytes_Handler,
		},
		{
			MethodName: "GetSentBytes",
			Handler:    _InterfaceService_GetSentBytes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service1.proto",
}
